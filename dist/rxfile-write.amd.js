/*!
 * rxfile-write
 * version: 0.0.1
 * repo: https://github.com/cheere/rxfile-write
 * build: 2021-10-25 17:42:43
 */
define(["fs","path"],(function(e,t){"use strict";function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var r=n(e),i=n(t);const c={error:function(e){if(e)e="unknow";else if("object"==typeof err)return err;return new Error("rxrrw-error=> read.js -> "+err)}},o={exists:function(e){const t=this;return new Promise(((n,i)=>{e?r.default.stat(e,((e,r)=>{e?i(e):r.isDirectory()?n({dir:!0,file:!1}):r.isFile()?n({dir:!1,file:!0}):i(t.error("rxrrw-exist=> stats not dir/file"))})):i(t.error("rxrrw-exist=> path undefined"))}))}},s={};s.read=function(e){const t=this;return new Promise(((n,i)=>{t.exists(e).then((()=>{(function(e){return new Promise(((t,n)=>{r.default.readFile(e,"utf-8",((e,r)=>{e?n(e):t(r)}))}))})(e).then((e=>{n(e)})).catch((e=>{i(e)}))})).catch((e=>{i(e)}))}))};const u={write:function(e,t){return this.writeTo(e,t)},writeSync:function(e,t){l(e,t)},writeAppend:function(e,t){return this.writeTo(e,t,!0)},writeAppendSync:function(e,t){l(e,t,!0)}};u.writeTo=function(e,t,n=!1){return new Promise(((c,o)=>{const s=i.default.dirname(e);this.exists(s).then((()=>{d(e,t,n).then(c).catch(o)})).catch((()=>{(function(e){return new Promise(((t,n)=>{r.default.mkdir(e,{mode:f,flag:"w+"},(function(e){e?n(e):t()}))}))})(e).then((()=>{d(e,t,n).then(c).catch(o)})).catch(o)}))}))};const f=parseInt("0755",8),a=parseInt("0666",8);function d(e,t,n=!1){let i="w+",c=r.default.writeFile;return n&&(c=r.default.appendFile,i="as+"),new Promise(((n,r)=>{c(e,t,{encoding:"utf8",mode:a,flag:i},(function(e){e?r(e):n()}))}))}function l(e,t,n=!1){let i="w+",c=r.default.writeFileSync;n&&(c=r.default.appendFileSync,i="as+");try{c(e,t,{encoding:"utf8",mode:a,flag:i})}catch(e){console.error(e)}}const h={};function w(e){let t=[];r.default.existsSync(e)&&(t=r.default.readdirSync(e),t.forEach((t=>{const n=e+"/"+t;r.default.statSync(n).isDirectory()?w(n):r.default.unlinkSync(n)})),r.default.rmdirSync(e))}h.remove=function(e){const t=this;return new Promise(((n,i)=>{t.exists(e).then((()=>{(function(e){return new Promise(((t,n)=>{try{r.default.statSync(e).isDirectory()?w(e):r.default.unlinkSync(e),t()}catch(e){console.log("rxrrw-remove=> error=",e),n(e)}}))})(e).then((()=>{n()})).catch((e=>{i(e)}))})).catch((e=>{i(e)}))}))};const y=Object.assign(o,s,u,h),m=Object.assign(c,y);m.version='"0.0.1"',module.exports=m}));
